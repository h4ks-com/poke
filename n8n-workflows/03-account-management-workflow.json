{
  "name": "Banking API - Account Management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "/api/account/balance",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "balance-webhook",
      "name": "Get Balance Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "account-balance"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate session token\nconst authHeader = $input.first().json.headers.authorization;\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { error: 'No valid authorization token', statusCode: 401 };\n}\n\nconst token = authHeader.replace('Bearer ', '');\nreturn { token };"
      },
      "id": "extract-token",
      "name": "Extract Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT u.id, u.username, u.account_number, u.balance FROM users u JOIN user_sessions s ON u.id = s.user_id WHERE s.session_token = $1 AND s.expires_at > NOW()",
        "additionalFields": {
          "values": "={{ [$json.token] }}"
        }
      },
      "id": "get-user-by-token",
      "name": "Get User by Token",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [700, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "user-authenticated",
              "leftValue": "={{ $json.length }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "auth-check-balance",
      "name": "Authenticated for Balance?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [920, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"balance\": parseFloat($json[0].balance),\n  \"accountNumber\": $json[0].account_number,\n  \"currency\": \"RUB\"\n} }}",
        "options": {}
      },
      "id": "balance-response",
      "name": "Balance Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1140, 240]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"error\": \"Unauthorized\", \"message\": \"Invalid or expired session\"}",
        "options": {
          "responseCode": 401
        }
      },
      "id": "unauthorized-balance",
      "name": "Unauthorized Balance Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [920, 400]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "/api/account/transactions",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "transactions-webhook",
      "name": "Get Transactions Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 600],
      "webhookId": "account-transactions"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate session token\nconst authHeader = $input.first().json.headers.authorization;\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { error: 'No valid authorization token', statusCode: 401 };\n}\n\nconst token = authHeader.replace('Bearer ', '');\nconst limit = parseInt($input.first().json.query.limit) || 10;\nreturn { token, limit };"
      },
      "id": "extract-token-transactions",
      "name": "Extract Token & Params",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT u.id, u.username FROM users u JOIN user_sessions s ON u.id = s.user_id WHERE s.session_token = $1 AND s.expires_at > NOW()",
        "additionalFields": {
          "values": "={{ [$json.token] }}"
        }
      },
      "id": "auth-user-transactions",
      "name": "Authenticate User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [700, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "user-auth-valid",
              "leftValue": "={{ $json.length }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "auth-check-transactions",
      "name": "Authenticated for Transactions?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [920, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT t.transaction_id, t.amount, t.transaction_type, t.description, t.memo, t.created_at, uf.username as from_username, ut.username as to_username FROM transactions t LEFT JOIN users uf ON t.from_user_id = uf.id LEFT JOIN users ut ON t.to_user_id = ut.id WHERE (t.from_user_id = $1 OR t.to_user_id = $1) ORDER BY t.created_at DESC LIMIT $2",
        "additionalFields": {
          "values": "={{ [$json[0].id, $node[\"Extract Token & Params\"].json.limit] }}"
        }
      },
      "id": "get-transactions",
      "name": "Get Transactions",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1140, 540],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Transform transaction data for frontend\nconst currentUser = $input.all()[0].json[0].username;\nconst transactions = $input.all()[1].json;\n\nconst transformedTransactions = transactions.map(tx => {\n  const isOutgoing = tx.from_username === currentUser;\n  const amount = isOutgoing ? -Math.abs(parseFloat(tx.amount)) : Math.abs(parseFloat(tx.amount));\n  \n  let description = tx.description;\n  if (tx.transaction_type === 'transfer') {\n    if (isOutgoing) {\n      description = `Transfer to ${tx.to_username}`;\n    } else {\n      description = `Received from ${tx.from_username}`;\n    }\n  }\n  \n  return {\n    id: tx.transaction_id,\n    type: 'transfer',\n    amount: amount,\n    description: description,\n    memo: tx.memo || '',\n    date: tx.created_at,\n    recipient: isOutgoing ? tx.to_username : tx.from_username\n  };\n});\n\nreturn {\n  transactions: transformedTransactions,\n  total: transformedTransactions.length\n};"
      },
      "id": "format-transactions",
      "name": "Format Transactions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1360, 540]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "transactions-response",
      "name": "Transactions Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1580, 540]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"error\": \"Unauthorized\", \"message\": \"Invalid or expired session\"}",
        "options": {
          "responseCode": 401
        }
      },
      "id": "unauthorized-transactions",
      "name": "Unauthorized Transactions Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [920, 700]
    }
  ],
  "connections": {
    "Get Balance Webhook": {
      "main": [
        [
          {
            "node": "Extract Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Token": {
      "main": [
        [
          {
            "node": "Get User by Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User by Token": {
      "main": [
        [
          {
            "node": "Authenticated for Balance?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Authenticated for Balance?": {
      "main": [
        [
          {
            "node": "Balance Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Balance Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Transactions Webhook": {
      "main": [
        [
          {
            "node": "Extract Token & Params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Token & Params": {
      "main": [
        [
          {
            "node": "Authenticate User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Authenticate User": {
      "main": [
        [
          {
            "node": "Authenticated for Transactions?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Authenticated for Transactions?": {
      "main": [
        [
          {
            "node": "Get Transactions",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Transactions Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Transactions": {
      "main": [
        [
          {
            "node": "Format Transactions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Transactions": {
      "main": [
        [
          {
            "node": "Transactions Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "id": "banking-account-workflow",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}
