{
  "name": "Banking API - Authentication",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/api/auth/login",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "auth-webhook",
      "name": "Login Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "auth-login"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, username, password_hash, account_number, balance FROM users WHERE username = $1",
        "additionalFields": {
          "values": "={{ [$node[\"Login Webhook\"].json[\"body\"][\"username\"]] }}"
        }
      },
      "id": "get-user",
      "name": "Get User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [480, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "user-exists",
              "leftValue": "={{ $json.length }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "user-exists-check",
      "name": "User Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "jsCode": "// Simulate password verification (replace with bcrypt in production)\nconst inputPassword = $input.first().json.body.password;\nconst storedHash = $input.first().json[0].password_hash;\nconst user = $input.first().json[0];\n\n// For demo purposes, we'll use a simple comparison\n// In production, use bcrypt.compare(inputPassword, storedHash)\nconst isValidPassword = inputPassword === 'password123' && user.username === 'player1';\n\nif (isValidPassword) {\n  // Generate session token\n  const sessionToken = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  \n  return {\n    success: true,\n    user: {\n      id: user.id,\n      username: user.username,\n      accountNumber: user.account_number,\n      balance: parseFloat(user.balance)\n    },\n    token: sessionToken,\n    userId: user.id\n  };\n} else {\n  return {\n    success: false,\n    error: 'Invalid credentials'\n  };\n}"
      },
      "id": "verify-password",
      "name": "Verify Password",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [920, 240]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO user_sessions (user_id, session_token, expires_at) VALUES ($1, $2, NOW() + INTERVAL '24 hours') RETURNING session_token",
        "additionalFields": {
          "values": "={{ [$json.userId, $json.token] }}"
        }
      },
      "id": "create-session",
      "name": "Create Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1140, 200],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": $json.success,\n  \"user\": $json.user,\n  \"token\": $json.token\n} }}",
        "options": {}
      },
      "id": "login-success-response",
      "name": "Login Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1360, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": false, \"error\": \"Invalid username or password\"}",
        "options": {
          "responseCode": 401
        }
      },
      "id": "login-error-response",
      "name": "Login Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [920, 360]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "password-valid",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "password-check",
      "name": "Password Valid?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1140, 260]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": false, \"error\": \"User not found\"}",
        "options": {
          "responseCode": 404
        }
      },
      "id": "user-not-found-response",
      "name": "User Not Found Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [700, 400]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/api/auth/logout",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "logout-webhook",
      "name": "Logout Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 600],
      "webhookId": "auth-logout"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM user_sessions WHERE session_token = $1",
        "additionalFields": {
          "values": "={{ [$node[\"Logout Webhook\"].json[\"headers\"][\"authorization\"]?.replace('Bearer ', '') || ''] }}"
        }
      },
      "id": "delete-session",
      "name": "Delete Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [480, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": true, \"message\": \"Logged out successfully\"}",
        "options": {}
      },
      "id": "logout-response",
      "name": "Logout Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [700, 600]
    }
  ],
  "connections": {
    "Login Webhook": {
      "main": [
        [
          {
            "node": "Get User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User": {
      "main": [
        [
          {
            "node": "User Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Exists?": {
      "main": [
        [
          {
            "node": "Verify Password",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "User Not Found Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Password": {
      "main": [
        [
          {
            "node": "Password Valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Password Valid?": {
      "main": [
        [
          {
            "node": "Create Session",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Login Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Session": {
      "main": [
        [
          {
            "node": "Login Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Logout Webhook": {
      "main": [
        [
          {
            "node": "Delete Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Session": {
      "main": [
        [
          {
            "node": "Logout Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "id": "banking-auth-workflow",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}
