{
  "name": "Banking API - User Registration",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/api/register",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "register-webhook",
      "name": "Register User Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "user-registration"
    },
    {
      "parameters": {
        "jsCode": "// Validate registration request\nconst body = $input.first().json.body;\n\n// Check required fields\nif (!body.username || !body.password || !body.confirmPassword) {\n  return { \n    error: 'Missing required fields: username, password, confirmPassword', \n    statusCode: 400 \n  };\n}\n\n// Validate username format (alphanumeric, 3-20 chars)\nconst usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\nif (!usernameRegex.test(body.username)) {\n  return { \n    error: 'Username must be 3-20 characters and contain only letters, numbers, and underscores', \n    statusCode: 400 \n  };\n}\n\n// Validate password strength (min 8 chars, at least 1 letter and 1 number)\nconst passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{8,}$/;\nif (!passwordRegex.test(body.password)) {\n  return { \n    error: 'Password must be at least 8 characters with at least one letter and one number', \n    statusCode: 400 \n  };\n}\n\n// Check password confirmation\nif (body.password !== body.confirmPassword) {\n  return { \n    error: 'Passwords do not match', \n    statusCode: 400 \n  };\n}\n\nreturn {\n  username: body.username.toLowerCase().trim(),\n  password: body.password\n};"
      },
      "id": "validate-registration",
      "name": "Validate Registration",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COUNT(*) as count FROM users WHERE username = $1",
        "additionalFields": {
          "values": "={{ [$json.username] }}"
        }
      },
      "id": "check-username-exists",
      "name": "Check Username Exists",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [700, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "username-available",
              "leftValue": "={{ parseInt($json[0].count) }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-username-available",
      "name": "Username Available?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [920, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generate account number and hash password\nconst crypto = require('crypto');\nconst bcrypt = require('bcrypt');\n\nconst userData = $node[\"Validate Registration\"].json;\n\n// Generate unique account number (format: ACC + 10 digits)\nconst accountNumber = 'ACC' + Date.now().toString().slice(-10);\n\n// Hash password with bcrypt (salt rounds: 12)\nconst passwordHash = bcrypt.hashSync(userData.password, 12);\n\n// Starting balance for new accounts\nconst startingBalance = 1000.00; // Give new users 1000 rubles to start\n\nreturn {\n  username: userData.username,\n  passwordHash: passwordHash,\n  accountNumber: accountNumber,\n  balance: startingBalance\n};"
      },
      "id": "prepare-user-data",
      "name": "Prepare User Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1140, 240]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO users (username, password_hash, account_number, balance) VALUES ($1, $2, $3, $4) RETURNING id, username, account_number, balance, created_at",
        "additionalFields": {
          "values": "={{ [$json.username, $json.passwordHash, $json.accountNumber, $json.balance] }}"
        }
      },
      "id": "create-user-account",
      "name": "Create User Account",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1360, 240],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Account created successfully\",\n  \"user\": {\n    \"id\": $json[0].id,\n    \"username\": $json[0].username,\n    \"accountNumber\": $json[0].account_number,\n    \"balance\": parseFloat($json[0].balance),\n    \"createdAt\": $json[0].created_at\n  }\n} }}",
        "options": {}
      },
      "id": "registration-success-response",
      "name": "Registration Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1580, 240]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"error\": \"Username already exists\", \"message\": \"Please choose a different username\"}",
        "options": {
          "responseCode": 409
        }
      },
      "id": "username-taken-response",
      "name": "Username Taken Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [920, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $node[\"Validate Registration\"].json }}",
        "options": {
          "responseCode": "={{ $node[\"Validate Registration\"].json.statusCode || 400 }}"
        }
      },
      "id": "validation-error-response",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [480, 400]
    }
  ],
  "connections": {
    "Register User Webhook": {
      "main": [
        [
          {
            "node": "Validate Registration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Registration": {
      "main": [
        [
          {
            "node": "Check Username Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Username Exists": {
      "main": [
        [
          {
            "node": "Username Available?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Username Available?": {
      "main": [
        [
          {
            "node": "Prepare User Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Username Taken Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare User Data": {
      "main": [
        [
          {
            "node": "Create User Account",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create User Account": {
      "main": [
        [
          {
            "node": "Registration Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "id": "banking-registration-workflow",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}
