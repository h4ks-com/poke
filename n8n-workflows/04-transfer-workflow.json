{
  "name": "Banking API - Transfer Management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/api/transfer",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "transfer-webhook",
      "name": "Transfer Money Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "money-transfer"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate transfer request\nconst authHeader = $input.first().json.headers.authorization;\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { error: 'No valid authorization token', statusCode: 401 };\n}\n\nconst token = authHeader.replace('Bearer ', '');\nconst body = $input.first().json.body;\n\n// Validate required fields\nif (!body.recipient || !body.amount || !body.memo) {\n  return { error: 'Missing required fields: recipient, amount, memo', statusCode: 400 };\n}\n\nconst amount = parseFloat(body.amount);\nif (isNaN(amount) || amount <= 0) {\n  return { error: 'Invalid amount', statusCode: 400 };\n}\n\nreturn {\n  token,\n  recipient: body.recipient.toString(),\n  amount: amount,\n  memo: body.memo.toString()\n};"
      },
      "id": "validate-transfer-request",
      "name": "Validate Transfer Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT u.id, u.username, u.balance FROM users u JOIN user_sessions s ON u.id = s.user_id WHERE s.session_token = $1 AND s.expires_at > NOW()",
        "additionalFields": {
          "values": "={{ [$json.token] }}"
        }
      },
      "id": "authenticate-sender",
      "name": "Authenticate Sender",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [700, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "sender-authenticated",
              "leftValue": "={{ $json.length }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-sender-auth",
      "name": "Sender Authenticated?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [920, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, username FROM users WHERE username = $1",
        "additionalFields": {
          "values": "={{ [$node[\"Validate Transfer Request\"].json.recipient] }}"
        }
      },
      "id": "find-recipient",
      "name": "Find Recipient",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1140, 240],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "recipient-exists",
              "leftValue": "={{ $json.length }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-recipient-exists",
      "name": "Recipient Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1360, 240]
    },
    {
      "parameters": {
        "jsCode": "// Check if sender has sufficient balance and not transferring to self\nconst sender = $input.all()[0].json[0];\nconst recipient = $input.all()[1].json[0];\nconst transferData = $node[\"Validate Transfer Request\"].json;\n\nif (sender.id === recipient.id) {\n  return { error: 'Cannot transfer to yourself', statusCode: 400 };\n}\n\nif (parseFloat(sender.balance) < transferData.amount) {\n  return { error: 'Insufficient balance', statusCode: 400 };\n}\n\nreturn {\n  senderId: sender.id,\n  senderUsername: sender.username,\n  senderBalance: parseFloat(sender.balance),\n  recipientId: recipient.id,\n  recipientUsername: recipient.username,\n  amount: transferData.amount,\n  memo: transferData.memo\n};"
      },
      "id": "validate-transfer",
      "name": "Validate Transfer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1580, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "transfer-valid",
              "leftValue": "={{ !$json.error }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-transfer-valid",
      "name": "Transfer Valid?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1800, 180]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "BEGIN; UPDATE users SET balance = balance - $1 WHERE id = $2; UPDATE users SET balance = balance + $1 WHERE id = $3; INSERT INTO transactions (from_user_id, to_user_id, amount, transaction_type, description, memo) VALUES ($2, $3, $1, 'transfer', 'Money Transfer', $4); COMMIT;",
        "additionalFields": {
          "values": "={{ [$json.amount, $json.senderId, $json.recipientId, $json.memo] }}"
        }
      },
      "id": "execute-transfer",
      "name": "Execute Transfer",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2020, 120],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT balance FROM users WHERE id = $1",
        "additionalFields": {
          "values": "={{ [$node[\"Validate Transfer\"].json.senderId] }}"
        }
      },
      "id": "get-new-balance",
      "name": "Get New Balance",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2240, 120],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Transfer completed successfully\",\n  \"transactionId\": \"TX\" + Date.now(),\n  \"newBalance\": parseFloat($json[0].balance),\n  \"amount\": $node[\"Validate Transfer\"].json.amount,\n  \"recipient\": $node[\"Validate Transfer\"].json.recipientUsername\n} }}",
        "options": {}
      },
      "id": "transfer-success-response",
      "name": "Transfer Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2460, 120]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $node[\"Validate Transfer\"].json }}",
        "options": {
          "responseCode": "={{ $node[\"Validate Transfer\"].json.statusCode || 400 }}"
        }
      },
      "id": "transfer-error-response",
      "name": "Transfer Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1800, 280]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"error\": \"Recipient not found\", \"message\": \"The specified recipient username does not exist\"}",
        "options": {
          "responseCode": 404
        }
      },
      "id": "recipient-not-found-response",
      "name": "Recipient Not Found Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1360, 340]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"error\": \"Unauthorized\", \"message\": \"Invalid or expired session\"}",
        "options": {
          "responseCode": 401
        }
      },
      "id": "unauthorized-transfer-response",
      "name": "Unauthorized Transfer Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [920, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $node[\"Validate Transfer Request\"].json }}",
        "options": {
          "responseCode": "={{ $node[\"Validate Transfer Request\"].json.statusCode || 400 }}"
        }
      },
      "id": "validation-error-response",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [480, 400]
    }
  ],
  "connections": {
    "Transfer Money Webhook": {
      "main": [
        [
          {
            "node": "Validate Transfer Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Transfer Request": {
      "main": [
        [
          {
            "node": "Authenticate Sender",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Authenticate Sender": {
      "main": [
        [
          {
            "node": "Sender Authenticated?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sender Authenticated?": {
      "main": [
        [
          {
            "node": "Find Recipient",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Transfer Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Recipient": {
      "main": [
        [
          {
            "node": "Recipient Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recipient Exists?": {
      "main": [
        [
          {
            "node": "Validate Transfer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Recipient Not Found Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Transfer": {
      "main": [
        [
          {
            "node": "Transfer Valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transfer Valid?": {
      "main": [
        [
          {
            "node": "Execute Transfer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transfer Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Transfer": {
      "main": [
        [
          {
            "node": "Get New Balance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get New Balance": {
      "main": [
        [
          {
            "node": "Transfer Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "id": "banking-transfer-workflow",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}
