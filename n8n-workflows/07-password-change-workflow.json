{
  "name": "Banking API - Password Change",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/api/change-password",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "change-password-webhook",
      "name": "Change Password Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "change-password"
    },
    {
      "parameters": {
        "jsCode": "// Validate password change request\nconst authHeader = $input.first().json.headers.authorization;\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { error: 'No valid authorization token', statusCode: 401 };\n}\n\nconst token = authHeader.replace('Bearer ', '');\nconst body = $input.first().json.body;\n\n// Check required fields\nif (!body.currentPassword || !body.newPassword || !body.confirmNewPassword) {\n  return { \n    error: 'Missing required fields: currentPassword, newPassword, confirmNewPassword', \n    statusCode: 400 \n  };\n}\n\n// Validate new password strength\nconst passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{8,}$/;\nif (!passwordRegex.test(body.newPassword)) {\n  return { \n    error: 'New password must be at least 8 characters with at least one letter and one number', \n    statusCode: 400 \n  };\n}\n\n// Check password confirmation\nif (body.newPassword !== body.confirmNewPassword) {\n  return { \n    error: 'New passwords do not match', \n    statusCode: 400 \n  };\n}\n\n// Check if new password is different from current\nif (body.currentPassword === body.newPassword) {\n  return { \n    error: 'New password must be different from current password', \n    statusCode: 400 \n  };\n}\n\nreturn {\n  token,\n  currentPassword: body.currentPassword,\n  newPassword: body.newPassword\n};"
      },
      "id": "validate-password-change",
      "name": "Validate Password Change",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT u.id, u.username, u.password_hash FROM users u JOIN user_sessions s ON u.id = s.user_id WHERE s.session_token = $1 AND s.expires_at > NOW()",
        "additionalFields": {
          "values": "={{ [$json.token] }}"
        }
      },
      "id": "authenticate-user",
      "name": "Authenticate User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [700, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "user-authenticated",
              "leftValue": "={{ $json.length }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-user-authenticated",
      "name": "User Authenticated?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [920, 300]
    },
    {
      "parameters": {
        "jsCode": "// Verify current password and prepare new password hash\nconst bcrypt = require('bcrypt');\n\nconst userData = $json[0];\nconst passwordData = $node[\"Validate Password Change\"].json;\n\n// Verify current password\nconst isCurrentPasswordValid = bcrypt.compareSync(\n  passwordData.currentPassword, \n  userData.password_hash\n);\n\nif (!isCurrentPasswordValid) {\n  return { \n    error: 'Current password is incorrect', \n    statusCode: 400 \n  };\n}\n\n// Hash new password\nconst newPasswordHash = bcrypt.hashSync(passwordData.newPassword, 12);\n\nreturn {\n  userId: userData.id,\n  username: userData.username,\n  newPasswordHash: newPasswordHash\n};"
      },
      "id": "verify-and-hash-password",
      "name": "Verify and Hash Password",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1140, 240]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "password-verification-success",
              "leftValue": "={{ !$json.error }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-password-verification",
      "name": "Password Verification Success?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1360, 240]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE users SET password_hash = $1 WHERE id = $2",
        "additionalFields": {
          "values": "={{ [$json.newPasswordHash, $json.userId] }}"
        }
      },
      "id": "update-password",
      "name": "Update Password",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1580, 180],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM user_sessions WHERE user_id = $1",
        "additionalFields": {
          "values": "={{ [$node[\"Verify and Hash Password\"].json.userId] }}"
        }
      },
      "id": "invalidate-all-sessions",
      "name": "Invalidate All Sessions",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1800, 180],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "Banking Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Password changed successfully. Please log in again with your new password.\",\n  \"username\": $node[\"Verify and Hash Password\"].json.username\n} }}",
        "options": {}
      },
      "id": "password-change-success-response",
      "name": "Password Change Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2020, 180]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $node[\"Verify and Hash Password\"].json }}",
        "options": {
          "responseCode": "={{ $node[\"Verify and Hash Password\"].json.statusCode || 400 }}"
        }
      },
      "id": "password-verification-error-response",
      "name": "Password Verification Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1360, 340]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"error\": \"Unauthorized\", \"message\": \"Invalid or expired session\"}",
        "options": {
          "responseCode": 401
        }
      },
      "id": "unauthorized-response",
      "name": "Unauthorized Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [920, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $node[\"Validate Password Change\"].json }}",
        "options": {
          "responseCode": "={{ $node[\"Validate Password Change\"].json.statusCode || 400 }}"
        }
      },
      "id": "validation-error-response",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [480, 400]
    }
  ],
  "connections": {
    "Change Password Webhook": {
      "main": [
        [
          {
            "node": "Validate Password Change",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Password Change": {
      "main": [
        [
          {
            "node": "Authenticate User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Authenticate User": {
      "main": [
        [
          {
            "node": "User Authenticated?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Authenticated?": {
      "main": [
        [
          {
            "node": "Verify and Hash Password",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify and Hash Password": {
      "main": [
        [
          {
            "node": "Password Verification Success?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Password Verification Success?": {
      "main": [
        [
          {
            "node": "Update Password",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Password Verification Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Password": {
      "main": [
        [
          {
            "node": "Invalidate All Sessions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Invalidate All Sessions": {
      "main": [
        [
          {
            "node": "Password Change Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "id": "banking-password-change-workflow",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}
